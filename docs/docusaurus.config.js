// @ts-check
// Note: type annotations allow type checking and IDEs autocompletion

const path = require('path');

const pnpapi = require('pnpapi');
const darkCodeTheme = require('prism-react-renderer/themes/dracula');
const lightCodeTheme = require('prism-react-renderer/themes/github');
const katex = require('rehype-katex');
const math = require('remark-math');

require('@babel/register')({
  presets: [
    ['@babel/preset-env', { targets: { node: 'current' } }],
    '@babel/preset-typescript',
  ],
  extensions: ['.js', '.jsx', '.ts', '.tsx'],
  ignore: [
    (path) => {
      const locator = pnpapi.findPackageLocator(path);

      if (locator.name.startsWith('@toss/')) {
        return false;
      }

      return true;
    },
  ],
  cache: true,
});

/** @type {import('@docusaurus/types').Config} */
const config = {
  title: 'GDSC DJU Design',
  tagline: '쉽고 간단하게 스타일을 사용해보세요',
  url: 'https://your-docusaurus-test-site.com',
  favicon: 'img/favicon.ico',
  baseUrl: '/',
  onBrokenLinks: 'warn',
  onBrokenMarkdownLinks: 'warn',
  organizationName: 'GDSC-Daejin', // Usually your GitHub org/user name.
  projectName: 'design-seed', // Usually your repo name.
  presets: [
    [
      'classic',
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          path: '../packages',
          routeBasePath: '/libraries',
          sidebarPath: require.resolve('./sidebars.libraries.js'),
          editUrl: ({ docPath }) => {
            const dirname = path.dirname(docPath);
            const markdownFilename = getFilename(docPath);
            const sourceFilename = getSourceFilename(markdownFilename);
            const editUrl = `${GITHUB_EDIT_PAGE_PREFIX}/packages/${dirname}/${sourceFilename}`;
            return editUrl;
          },
        },
        pages: {
          path: 'pages',
          routeBasePath: '/',
          include: ['**/*.{js,jsx,ts,tsx,md,mdx,html}'],
          mdxPageComponent: '@theme/MDXPage',
        },
        blog: {
          blogTitle: 'GDSC DJU Design Blog',
          blogDescription: 'A Docusaurus powered blog!',
          postsPerPage: 'ALL',
          blogSidebarTitle: 'All posts',
          blogSidebarCount: 'ALL',
          showReadingTime: true, // When set to false, the "x min read" won't be shown
          readingTime: ({ content, frontMatter, defaultReadingTime }) =>
            defaultReadingTime({ content, options: { wordsPerMinute: 300 } }),
          feedOptions: {
            type: 'all',
            copyright: `Copyright © ${new Date().getFullYear()} GDSC DJU, Inc.`,
          },
        },
        theme: {
          customCss: require.resolve('./src/css/custom.css'),
        },
      }),
    ],
  ],
  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      navbar: {
        title: 'GDSC DJU Design',
        logo: {
          alt: 'My Site Logo',
          src: 'img/logo.svg',
        },
        items: [
          {
            type: 'doc',
            docId: 'styled-components/README',
            position: 'left',
            label: 'Docs',
          },
          {
            href: 'https://github.com/toss/slash',
            label: 'GitHub',
            position: 'right',
          },
        ],
      },

      footer: {
        style: 'dark',
        links: [
          {
            title: 'Community',
            items: [
              {
                label: 'Website',
                href: 'https://web.gdsc-dju.com/',
              },
            ],
          },
        ],
        copyright: `Copyright © ${new Date().getFullYear()} GDSC DJU, Inc.`,
      },
      prism: {
        theme: lightCodeTheme,
        darkTheme: darkCodeTheme,
      },
    }),
  plugins: [require.resolve('./scripts/webpack5-compat.js')],
};
const GITHUB_EDIT_PAGE_PREFIX =
  'https://github.com/GDSC-Daejin/design-seed/tree/master';

function getFilename(path) {
  const names = path.split('/');
  const filename = names[names.length - 1];

  if (filename == null) {
    throw new Error(`path가 올바르지 않습니다. ${path}`);
  }

  return filename;
}

function getSourceFilename(markdownFilename) {
  const isAutoGenerated = markdownFilename.endsWith('.docs.md');
  return isAutoGenerated
    ? markdownFilename.replace('.docs.md', '')
    : markdownFilename;
}

module.exports = config;
