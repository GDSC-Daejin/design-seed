{
  "version": 3,
  "sources": ["../src/index.ts", "../src/GdsThemeProvider.tsx", "../src/DarkModeContext.ts", "../src/styles/colors/index.ts", "../src/styles/windowSize.ts", "../src/styles/fontSizes/index.ts", "../src/types/utils.ts", "../src/useDarkMode.ts"],
  "sourcesContent": ["export { GdsThemeProvider } from './GdsThemeProvider';\nexport { DarkModeContext } from './DarkModeContext';\nexport { useDarkMode } from './useDarkMode';\nexport type {\n  ColorScheme,\n  isColorGroup,\n  ColorTheme,\n  ColorToken,\n  SemanticColorScheme,\n  ColorGroup,\n} from './styles/colors/types';\nexport type {\n  FontToken,\n  FontGroup,\n  FontScheme,\n} from './styles/fontSizes/types';\n", "import React from 'react';\nimport { DefaultTheme, ThemeProvider } from 'styled-components';\nimport { DarkModeContext } from './DarkModeContext';\nimport { colors, fontSizes } from './styles';\nimport { ColorScheme, SemanticColorScheme } from './styles/colors/types';\n\nimport { windowSize } from './styles/windowSize';\n\nimport { BehaviorMode, getThemeName } from './types/utils';\nimport { useDarkMode } from './useDarkMode';\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  mode: BehaviorMode;\n}\n\nexport type GdsTheme = {\n  colors: SemanticColorScheme & ColorScheme;\n  windowSize: typeof windowSize;\n  fontSize: typeof fontSizes;\n};\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends GdsTheme {}\n}\n\nexport const GdsThemeProvider: React.FC<ThemeProviderProps> = ({\n  children,\n  mode = 'auto' as BehaviorMode,\n}) => {\n  const darkMode = useDarkMode();\n  const theme = React.useMemo((): DefaultTheme => {\n    const colorTheme = colors[getThemeName(mode, darkMode.isDarkMode)];\n    return {\n      colors: colorTheme,\n      windowSize: windowSize,\n      fontSize: fontSizes,\n    };\n  }, [mode, darkMode.isDarkMode]);\n\n  return (\n    <DarkModeContext.Provider value={darkMode}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </DarkModeContext.Provider>\n  );\n};\n", "import { createContext } from 'react';\n\nconst noop = () => {};\ntype DarkModeContextType = {\n  isDarkMode: boolean;\n  toggleTheme: () => void;\n};\nexport const DarkModeContext = createContext<DarkModeContextType>({\n  isDarkMode: false,\n  toggleTheme: noop,\n});\n", "import { ColorTheme } from './types';\n\nexport const assetLightGrey = {\n  white: '#FFF',\n  grey50: '#F9FAFB',\n  grey100: '#F2F4F6',\n  grey200: '#E5E8EB',\n  grey300: '#D1D6DB',\n  grey400: '#B0B8C1',\n  grey500: '#8B95A1',\n  grey600: '#6B7684',\n  grey700: '#4E5968',\n  grey800: '#333D4B',\n  grey900: '#191F28',\n};\nexport const assetDarkGrey = {\n  white: '#191F28',\n  grey50: '#333D4B',\n  grey100: '#4E5968',\n  grey200: '#6B7684',\n  grey300: '#8B95A1',\n  grey400: '#B0B8C1',\n  grey500: '#D1D6DB',\n  grey600: '#E5E8EB',\n  grey700: '#F2F4F6',\n  grey800: '#F9FAFB',\n  grey900: '#FFF',\n};\nexport const assetGreen = {\n  green100: '#E8F5E9',\n  green200: '#C8E6C9',\n  green300: '#A5D6A7',\n  green400: '#81C784',\n  green500: '#66BB6A',\n  green600: '#4CAF50',\n  green900: '#34A853',\n};\nexport const assetYellow = {\n  yellow100: '#FFF8E1',\n  yellow200: '#FFECB3',\n  yellow300: '#FFE082',\n  yellow400: '#FFD54F',\n  yellow500: '#FFCA28',\n  yellow600: '#FFC107',\n  yellow900: '#FBBC04',\n};\nexport const assetRed = {\n  red100: '#FFEBEE',\n  red200: '#FFCDD2',\n  red300: '#EF9A9A',\n  red400: '#E57373',\n  red500: '#EF5350',\n  red600: '#F44336',\n  red900: '#EA4335',\n};\nexport const assetOrange = {\n  orange100: '#FFF3E0',\n  orange200: '#FFE0B2',\n  orange300: '#FFCC80',\n  orange400: '#FFB74D',\n  orange500: '#FFA726',\n  orange600: '#FF9800',\n  orange700: '#FB8C00',\n  orange800: '#F57C00',\n  orange900: '#FF740F',\n};\nexport const assetBlue = {\n  blue100: '#E3F2FD',\n  blue200: '#BBDEFB',\n  blue300: '#90CAF9',\n  blue400: '#64B5F6',\n  blue500: '#42A5F5',\n  blue600: '#2196F3',\n  blue900: '#4285F4',\n};\n\nconst lightSemanticScheme = {\n  background: '#fff',\n  backgroundLow: 'grey100',\n  boxShadow100:\n    '0 0.8px 2px rgba(0,0,0,0.03), 0 3px 7px rgba(0,0,0,0.05), 0 12px 30px rgba(0,0,0,0.1)',\n};\nconst darkSemanticScheme = {\n  background: '#202124',\n  backgroundLow: 'grey100',\n  boxShadow100:\n    '0 0.8px 2px rgba(0,0,0,0.03), 0 3px 7px rgba(0,0,0,0.05), 0 12px 30px rgba(0,0,0,0.1)',\n};\n\nexport const pointColors = {\n  ...assetGreen,\n  ...assetYellow,\n  ...assetRed,\n  ...assetBlue,\n  ...assetOrange,\n};\n\nexport const light: Readonly<ColorTheme> = {\n  ...assetLightGrey,\n  ...pointColors,\n  ...lightSemanticScheme,\n};\nexport const dark: Readonly<ColorTheme> = {\n  ...assetDarkGrey,\n  ...pointColors,\n  ...darkSemanticScheme,\n};\n", "type WindowSize = {\n  desk: number;\n  tablet: number;\n  mobile: number;\n};\n\nexport const windowSize: WindowSize = { desk: 1024, tablet: 768, mobile: 500 };\n", "import { FontScheme } from './types';\n\nexport const fontSizes: FontScheme = {\n  titleXxl: '5.6rem',\n  titleXl: '4.8rem',\n  titleL: '3.6rem',\n  titleM: '3.2rem',\n  titleS: '2.4rem',\n  textXxl: '2rem',\n  textXl: '1.8rem',\n  textL: '1.6rem',\n  textM: '1.4rem',\n  textS: '1.2rem',\n};\n", "export type ThemeName = 'light' | 'dark';\n\nexport type BehaviorMode = 'auto' | 'light-only' | 'dark-only';\n\nexport const getThemeName = (\n  mode: BehaviorMode,\n  isDarkMode: boolean,\n): ThemeName => {\n  return (\n    {\n      auto: isDarkMode ? 'dark' : 'light',\n      'light-only': 'light',\n      'dark-only': 'dark',\n    } as const\n  )[mode];\n};\n", "import { useEffect, useState } from 'react';\n\ntype UseDarkMode = () => { isDarkMode: boolean; toggleTheme: () => void };\n\nexport const useDarkMode: UseDarkMode = () => {\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(true);\n  const setMode = (isDark: boolean) => {\n    window.localStorage.setItem('theme', isDark ? 'dark' : 'light');\n    setIsDarkMode(isDark);\n  };\n\n  const toggleTheme = () => setMode(!isDarkMode);\n\n  useEffect(() => {\n    const isBrowserDarkMode =\n      window.matchMedia &&\n      window.matchMedia('(prefers-color-scheme: dark)').matches;\n    let initTheme = isBrowserDarkMode;\n\n    const localSettingTheme = localStorage.getItem('theme');\n\n    if (localSettingTheme) {\n      initTheme = localSettingTheme === 'dark';\n      setIsDarkMode(initTheme);\n    }\n  }, []);\n\n  return { isDarkMode, toggleTheme };\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "DarkModeContext", "GdsThemeProvider", "useDarkMode", "__toCommonJS", "import_react", "import_styled_components", "import_react", "noop", "DarkModeContext", "colors_exports", "__export", "assetBlue", "assetDarkGrey", "assetGreen", "assetLightGrey", "assetOrange", "assetRed", "assetYellow", "dark", "light", "pointColors", "lightSemanticScheme", "darkSemanticScheme", "windowSize", "fontSizes", "getThemeName", "mode", "isDarkMode", "import_react", "useDarkMode", "isDarkMode", "setIsDarkMode", "setMode", "isDark", "toggleTheme", "initTheme", "localSettingTheme", "GdsThemeProvider", "children", "mode", "darkMode", "useDarkMode", "theme", "React", "colors_exports", "getThemeName", "windowSize", "fontSizes", "DarkModeContext"]
}
